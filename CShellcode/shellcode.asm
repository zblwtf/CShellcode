; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31332.0 

include listing.inc

INCLUDELIB OLDNAMES

EXTRN	AlignRSP:PROC
PUBLIC	ReflectiveLoader
PUBLIC	GetProcAddressWithHash
PUBLIC	Begin
;	COMDAT pdata
pdata	SEGMENT
$pdata$ReflectiveLoader DD imagerel $LN62
	DD	imagerel $LN62+729
	DD	imagerel $unwind$ReflectiveLoader
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$GetProcAddressWithHash DD imagerel $LN38
	DD	imagerel $LN38+275
	DD	imagerel $unwind$GetProcAddressWithHash
pdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	019H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$GetProcAddressWithHash DD 0a1901H
	DD	077419H
	DD	066419H
	DD	055419H
	DD	043419H
	DD	0e0151219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ReflectiveLoader DD 0a1701H
	DD	0133417H
	DD	0f0107217H
	DD	0d00ce00eH
	DD	07008c00aH
	DD	050066007H
xdata	ENDS
; Function compile flags: /Ogspy
;	COMDAT Begin
_TEXT	SEGMENT
lpParam$ = 8
Begin	PROC						; COMDAT
; File C:\Users\23035\Desktop\Home\C++\CShellcode\CShellcode\64BitHelper.h
; Line 9
	jmp	AlignRSP
Begin	ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
;	COMDAT GetProcAddressWithHash
_TEXT	SEGMENT
BaseDllName$ = 0
dwModuleHash_$ = 32
dwFunctionHash_$ = 40
GetProcAddressWithHash PROC				; COMDAT
; File C:\Users\23035\Desktop\Home\C++\CShellcode\CShellcode\shellcode.cpp
; Line 17
$LN38:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	mov	QWORD PTR [rax+16], rbp
	mov	QWORD PTR [rax+24], rsi
	mov	QWORD PTR [rax+32], rdi
	push	r14
	sub	rsp, 16
; Line 38
	mov	rax, QWORD PTR gs:96
	mov	ebp, edx
	mov	esi, ecx
; Line 53
	xor	r14d, r14d
	mov	r8, QWORD PTR [rax+24]
	mov	r10, QWORD PTR [r8+16]
$LN8@GetProcAdd:
; Line 55
	cmp	QWORD PTR [r10+48], r14
	je	$LN36@GetProcAdd
; Line 56
	mov	r9, QWORD PTR [r10+48]
	mov	r8d, r14d
; Line 57
	movups	xmm0, XMMWORD PTR [r10+88]
; Line 62
	mov	r10, QWORD PTR [r10]
	movsxd	rax, DWORD PTR [r9+60]
	movdqu	XMMWORD PTR BaseDllName$[rsp], xmm0
	mov	r11d, DWORD PTR [rax+r9+136]
; Line 65
	test	r11d, r11d
	je	SHORT $LN8@GetProcAdd
; Line 71
	mov	rax, QWORD PTR BaseDllName$[rsp]
	shr	rax, 16
	cmp	r14w, ax
	jae	SHORT $LN5@GetProcAdd
	mov	rcx, QWORD PTR BaseDllName$[rsp+8]
	movzx	edx, ax
$LL6@GetProcAdd:
; Line 77
	movsx	eax, BYTE PTR [rcx]
	ror	r8d, 13
	cmp	BYTE PTR [rcx], 97			; 00000061H
	jl	SHORT $LN14@GetProcAdd
; Line 79
	add	r8d, -32				; ffffffe0H
$LN14@GetProcAdd:
; Line 71
	add	r8d, eax
	inc	rcx
	sub	rdx, 1
	jne	SHORT $LL6@GetProcAdd
$LN5@GetProcAdd:
; Line 86
	cmp	r8d, esi
	jne	SHORT $LN8@GetProcAdd
; Line 88
	lea	r8, QWORD PTR [r9+r11]
; Line 93
	mov	r11d, r14d
	mov	ebx, DWORD PTR [r8+32]
	add	rbx, r9
	cmp	DWORD PTR [r8+24], r14d
	jbe	SHORT $LN8@GetProcAdd
$LL9@GetProcAdd:
; Line 96
	mov	edi, DWORD PTR [rbx]
	mov	edx, r14d
	add	rdi, r9
; Line 97
	lea	rbx, QWORD PTR [rbx+4]
$LL12@GetProcAdd:
; Line 104
	movsx	ecx, BYTE PTR [rdi]
; Line 105
	inc	rdi
	ror	edx, 13
	add	edx, ecx
; Line 106
	test	cl, cl
	jne	SHORT $LL12@GetProcAdd
; Line 107
	cmp	edx, ebp
	je	SHORT $LN25@GetProcAdd
; Line 93
	inc	r11d
	cmp	r11d, DWORD PTR [r8+24]
	jb	SHORT $LL9@GetProcAdd
; Line 53
	jmp	$LN8@GetProcAdd
$LN25@GetProcAdd:
; Line 109
	mov	eax, DWORD PTR [r8+36]
	lea	ecx, DWORD PTR [r11+r11]
	add	rax, r9
; Line 110
	movzx	edx, WORD PTR [rcx+rax]
	mov	ecx, DWORD PTR [r8+28]
	add	rcx, r9
	mov	eax, DWORD PTR [rcx+rdx*4]
	add	rax, r9
	jmp	SHORT $LN1@GetProcAdd
$LN36@GetProcAdd:
; Line 116
	xor	eax, eax
$LN1@GetProcAdd:
; Line 117
	mov	rbx, QWORD PTR [rsp+32]
	mov	rbp, QWORD PTR [rsp+40]
	mov	rsi, QWORD PTR [rsp+48]
	mov	rdi, QWORD PTR [rsp+56]
	add	rsp, 16
	pop	r14
	ret	0
GetProcAddressWithHash ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
;	COMDAT ReflectiveLoader
_TEXT	SEGMENT
User32_Path$ = 32
MSVC_Path$ = 48
pGetProcAddress$1$ = 128
lpFileBase$ = 128
uiHeaderValue$1$ = 136
pNtFlushInstructionCache$1$ = 144
ReflectiveLoader PROC					; COMDAT
; File C:\Users\23035\Desktop\Home\C++\CShellcode\CShellcode\shellcode.cpp
; Line 183
$LN62:
	mov	QWORD PTR [rsp+32], rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	mov	rbp, rsp
	sub	rsp, 64					; 00000040H
	mov	rsi, rcx
; Line 202
	mov	DWORD PTR User32_Path$[rbp-64], 1919251317 ; 72657375H
	xor	r12d, r12d
	mov	DWORD PTR User32_Path$[rbp-60], 1680749107 ; 642e3233H
; Line 204
	mov	ebx, -1834019110			; 92af16daH
	mov	WORD PTR User32_Path$[rbp-56], 27756	; 00006c6cH
	mov	ecx, ebx
	mov	BYTE PTR User32_Path$[rbp-54], r12b
	mov	edx, 1953980530				; 74776072H
	mov	DWORD PTR MSVC_Path$[rbp-64], 1668707181 ; 6376736dH
	mov	DWORD PTR MSVC_Path$[rbp-60], 1680766066 ; 642e7472H
	mov	WORD PTR MSVC_Path$[rbp-56], 27756	; 00006c6cH
	mov	BYTE PTR MSVC_Path$[rbp-54], r12b
	call	GetProcAddressWithHash
	mov	r13, rax
; Line 205
	lea	rcx, QWORD PTR User32_Path$[rbp-64]
	call	r13
; Line 206
	lea	rcx, QWORD PTR MSVC_Path$[rbp-64]
	call	r13
; Line 207
	mov	edx, -447487889				; e553e06fH
	mov	ecx, ebx
	call	GetProcAddressWithHash
; Line 209
	mov	edx, 1386515838				; 52a48d7eH
	mov	QWORD PTR pGetProcAddress$1$[rbp-64], rax
	mov	ecx, ebx
	call	GetProcAddressWithHash
; Line 210
	mov	edx, 1438816864				; 55c29a60H
	mov	ecx, 1050285903				; 3e9a174fH
	mov	rbx, rax
	call	GetProcAddressWithHash
; Line 214
	movsxd	r15, DWORD PTR [rsi+60]
; Line 218
	lea	r9d, QWORD PTR [r12+64]
	add	r15, rsi
	mov	QWORD PTR pNtFlushInstructionCache$1$[rbp-64], rax
	xor	ecx, ecx
	mov	QWORD PTR uiHeaderValue$1$[rbp-64], r15
	mov	r8d, 12288				; 00003000H
	mov	r14, rax
	mov	edx, DWORD PTR [r15+80]
	call	rbx
; Line 221
	mov	r8d, DWORD PTR [r15+84]
; Line 225
	lea	r11d, QWORD PTR [r12+1]
	mov	rdi, rax
	mov	rdx, rsi
	test	r8, r8
	je	SHORT $LN35@Reflective
; Line 202
	sub	rax, rsi
$LL2@Reflective:
; Line 226
	mov	cl, BYTE PTR [rdx]
	mov	BYTE PTR [rax+rdx], cl
	add	rdx, r11
	sub	r8, r11
	jne	SHORT $LL2@Reflective
$LN35@Reflective:
; Line 231
	movzx	ecx, WORD PTR [r15+20]
; Line 234
	movzx	r9d, WORD PTR [r15+6]
	add	rcx, r15
; Line 235
	test	r9, r9
	je	SHORT $LN39@Reflective
; Line 231
	add	rcx, 44					; 0000002cH
$LL4@Reflective:
; Line 238
	mov	edx, DWORD PTR [rcx-8]
	sub	r9, r11
; Line 241
	mov	r8d, DWORD PTR [rcx]
	add	rdx, rdi
; Line 244
	mov	r10d, DWORD PTR [rcx-4]
	add	r8, rsi
; Line 246
	test	r10, r10
	je	SHORT $LN37@Reflective
$LL6@Reflective:
; Line 247
	mov	al, BYTE PTR [r8]
	add	r8, r11
	mov	BYTE PTR [rdx], al
	add	rdx, r11
	sub	r10, r11
	jne	SHORT $LL6@Reflective
$LN37@Reflective:
; Line 250
	add	rcx, 40					; 00000028H
	test	r9, r9
	jne	SHORT $LL4@Reflective
$LN39@Reflective:
; Line 260
	mov	ebx, DWORD PTR [r15+144]
	add	rbx, rdi
; Line 263
	cmp	DWORD PTR [rbx+12], r12d
	je	$LN9@Reflective
	mov	r15, QWORD PTR pGetProcAddress$1$[rbp-64]
$LL8@Reflective:
; Line 266
	mov	ecx, DWORD PTR [rbx+12]
	add	rcx, rdi
	call	r13
; Line 269
	mov	esi, DWORD PTR [rbx]
	mov	r12, rax
; Line 272
	mov	r14d, DWORD PTR [rbx+16]
	add	rsi, rdi
	add	r14, rdi
	jmp	SHORT $LN60@Reflective
$LL10@Reflective:
; Line 278
	test	rsi, rsi
	je	SHORT $LN16@Reflective
	cmp	QWORD PTR [rsi], 0
	jge	SHORT $LN16@Reflective
; Line 281
	movsxd	rax, DWORD PTR [r12+60]
; Line 293
	movzx	edx, WORD PTR [rsi]
	mov	ecx, DWORD PTR [rax+r12+136]
	mov	eax, DWORD PTR [rcx+r12+16]
	mov	ecx, DWORD PTR [rcx+r12+28]
	sub	rdx, rax
	add	rcx, r12
; Line 296
	mov	eax, DWORD PTR [rcx+rdx*4]
	add	rax, r12
; Line 297
	jmp	SHORT $LN17@Reflective
$LN16@Reflective:
; Line 301
	mov	rdx, QWORD PTR [r14]
; Line 304
	mov	rcx, r12
	add	rdx, 2
	add	rdx, rdi
	call	r15
$LN17@Reflective:
; Line 307
	mov	QWORD PTR [r14], rax
	lea	rax, QWORD PTR [rsi+8]
	add	r14, 8
	test	rsi, rsi
	cmove	rax, rsi
	mov	rsi, rax
$LN60@Reflective:
; Line 275
	cmp	QWORD PTR [r14], 0
	jne	SHORT $LL10@Reflective
; Line 313
	add	rbx, 20
	xor	r12d, r12d
	cmp	DWORD PTR [rbx+12], r12d
	jne	$LL8@Reflective
	mov	r15, QWORD PTR uiHeaderValue$1$[rbp-64]
	lea	r11d, QWORD PTR [r12+1]
	mov	r14, QWORD PTR pNtFlushInstructionCache$1$[rbp-64]
$LN9@Reflective:
; Line 316
	mov	r10, rdi
	sub	r10, QWORD PTR [r15+48]
; Line 322
	cmp	DWORD PTR [r15+180], r12d
	je	$LN13@Reflective
; Line 325
	mov	r8d, DWORD PTR [r15+176]
	add	r8, rdi
; Line 328
	mov	eax, DWORD PTR [r8+4]
	test	eax, eax
	je	$LN13@Reflective
	mov	esi, 4095				; 00000fffH
	mov	r13d, 2
$LL12@Reflective:
; Line 331
	mov	edx, DWORD PTR [r8]
; Line 337
	lea	rbx, QWORD PTR [r8+8]
	mov	r9d, eax
	add	rdx, rdi
	sub	r9, 8
	shr	r9, 1
; Line 340
	je	SHORT $LN42@Reflective
$LL45@Reflective:
	sub	r9, r11
; Line 345
	movzx	r11d, WORD PTR [rbx]
	movzx	eax, r11w
	movzx	ecx, r11w
	shr	ax, 12
	cmp	ax, 10
	jne	SHORT $LN20@Reflective
; Line 346
	and	r11, rsi
	add	QWORD PTR [r11+rdx], r10
	mov	r11d, 1
	jmp	SHORT $LN26@Reflective
$LN20@Reflective:
; Line 347
	mov	r11d, 1
	cmp	ax, 3
	jne	SHORT $LN22@Reflective
; Line 348
	and	rcx, rsi
	add	DWORD PTR [rcx+rdx], r10d
	jmp	SHORT $LN26@Reflective
$LN22@Reflective:
; Line 349
	cmp	ax, r11w
	jne	SHORT $LN24@Reflective
; Line 350
	and	rcx, rsi
	mov	rax, r10
	shr	rax, 16
	add	WORD PTR [rcx+rdx], ax
	jmp	SHORT $LN26@Reflective
$LN24@Reflective:
; Line 351
	cmp	ax, r13w
	jne	SHORT $LN26@Reflective
; Line 352
	and	rcx, rsi
	add	WORD PTR [rcx+rdx], r10w
$LN26@Reflective:
; Line 355
	add	rbx, r13
	test	r9, r9
	jne	SHORT $LL45@Reflective
$LN42@Reflective:
; Line 359
	mov	eax, DWORD PTR [r8+4]
	add	r8, rax
	mov	eax, DWORD PTR [r8+4]
	test	eax, eax
	jne	$LL12@Reflective
$LN13@Reflective:
; Line 364
	mov	ebx, DWORD PTR [r15+40]
; Line 365
	xor	r8d, r8d
	xor	edx, edx
	or	rcx, -1
	add	rbx, rdi
	call	r14
; Line 366
	xor	r8d, r8d
	mov	rcx, rdi
	lea	edx, QWORD PTR [r8+1]
	call	rbx
; Line 368
	mov	rbx, QWORD PTR [rsp+152]
	add	rsp, 64					; 00000040H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
ReflectiveLoader ENDP
_TEXT	ENDS
END
